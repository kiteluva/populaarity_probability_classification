##############################
### CODE FOR AUC & ROC ###
##############################
# Load necessary libraries
library(tidyverse)
library(caret)
library(ranger)
library(lubridate)
library(pROC)
library(readr)
library(ggplot2)
# ------------------------
# 1. Load & Clean the Data
# ------------------------
# Load your dataset (adjust the file path accordingly)
spotify_charts_2024 <- read_csv("~/school docs/universal_top_spotify_songs.new.csv")
# Convert date columns and calculate difference in days
spotify_charts_2024 <- spotify_charts_2024 %>%
mutate(snapshot_date = ymd(snapshot_date),
album_release_date = ymd(album_release_date),
days_out = as.numeric(snapshot_date - album_release_date))
# Remove duplicates based on the spotify_id column while retaining all columns
spotify_charts_2024 <- spotify_charts_2024 %>%
distinct(spotify_id, .keep_all = TRUE)
# Remove unneeded columns
spotify_charts_2024 <- spotify_charts_2024 %>%
select(-country, -snapshot_date, -name, -artists, -album_name, -album_release_date, -spotify_id)
# Convert 'is_explicit' (boolean) to integer
spotify_charts_2024$is_explicit <- as.integer(spotify_charts_2024$is_explicit)
# Handle missing values in numeric columns only
numeric_cols <- sapply(spotify_charts_2024, is.numeric)
spotify_charts_2024[numeric_cols] <- lapply(spotify_charts_2024[numeric_cols],
function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x))
# Standardize 'duration_ms' to minutes, then remove the original column
spotify_charts_2024 <- spotify_charts_2024 %>%
mutate(duration_min = duration_ms / 60000) %>%
select(-duration_ms)
# ------------------------
# 2. Prepare Data for Classification
# ------------------------
# Convert 'popularity' into a binary factor.
# This assigns popularity into two levels: "Low" and "High."
# 'make.names' ensures the levels are valid R variable names.
spotify_charts_2024 <- spotify_charts_2024 %>%
mutate(popularity = ifelse(popularity >= 50, "High", "Low")) %>%
mutate(popularity = make.names(popularity))
# Define feature columns (adjust these names if needed)
feature_columns <- c("daily_rank", "duration_min","daily_movement","weekly_movement",
"days_out", "is_explicit", "mode", "danceability", "energy", "loudness",
"speechiness", "acousticness", "instrumentalness", "time_signature",
"liveness", "valence", "key", "tempo")
View(spotify_charts_2024)
# Create a dataset with predictors and the target variable
class_data <- spotify_charts_2024 %>%
select(all_of(feature_columns), popularity)
